export async function render() {
  const app = document.getElementById('app');
  const api = window.baseApiUrl || `${location.origin}/intro/api`;

  // Utilities
  const toTitle = (s) => String(s || '').replace(/\s+/g, ' ').trim().replace(/\b\w/g, c => c.toUpperCase());
  const peso = (n) => `â‚±${Number(n || 0).toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  const fmtDate = (s) => { if (!s) return ''; try { const d = new Date(s); return isNaN(d) ? String(s) : d.toLocaleDateString('en-CA'); } catch { return String(s); } };
  const downloadBlob = (blob, filename) => { const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = filename; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); };
  const openCsv = (url) => { window.open(url, '_blank'); };
  async function safeToast(message, type = 'info') {
    try {
      // Use window.showToast if available, fallback to alert
      if (window.showToast) {
        window.showToast(String(message), type);
      } else {
        alert(String(message));
      }
    } catch {
      try { alert(String(message)); } catch {}
    }
  }

  // Data sources
  async function getMe() {
    try { const res = await axios.get(`${api}/auth.php`, { params: { operation: 'me' }, withCredentials: true }); return res.data && res.data.user ? res.data.user : null; } catch { return null; }
  }
  async function getEmployees() {
    try { const res = await axios.get(`${api}/employees.php`, { params: { operation: 'getEmployees' } }); return Array.isArray(res.data) ? res.data : []; } catch { return []; }
  }
  async function getDepartments() {
    try { const res = await axios.get(`${api}/employees.php`, { params: { operation: 'getDepartments' } }); return Array.isArray(res.data) ? res.data : []; } catch { return []; }
  }

  // Backend hooks
  async function generateReport(type, filters) {
    const fd = new FormData();
    fd.append('operation', 'generateReport');
    fd.append('type', type);
    fd.append('json', JSON.stringify(filters || {}));
    const res = await axios.post(`${api}/reports.php?operation=generateReport`, fd);
    return res.data || { success: false };
  }
  async function listReports(type, filters, page = 1, limit = 20) {
    const params = Object.assign({ operation: 'listReports', type, page, limit }, filters || {});
    const res = await axios.get(`${api}/reports.php`, { params });
    return res.data || { items: [], total: 0, page: 1, limit };
  }
  // Dynamically load SheetJS for client-side XLSX export
  async function ensureXlsxAssets(){
    if (window.XLSX) return;
    await new Promise((resolve) => {
      const s = document.createElement('script');
      s.src = 'https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js';
      s.onload = resolve; s.onerror = resolve; document.head.appendChild(s);
    });
  }
  // Generate a true .xlsx file with computed column widths to avoid Excel warnings and #####
  async function exportReportsExcel(type, filters) {
    try {
      await ensureXlsxAssets();
      // Helper formatters for Excel export
      const pad2 = (n) => String(n).padStart(2, '0');
      const fmtDateLong = (val) => {
        try { const d = new Date(val); if (isNaN(d.getTime())) return val || ''; return d.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }); } catch { return val || ''; }
      };
      const fmtTime = (val) => {
        try {
          const d = new Date(val); if (isNaN(d.getTime())) return '';
          let h = d.getHours();
          const m = d.getMinutes();
          const ampm = h >= 12 ? 'PM' : 'AM';
          h = h % 12; if (h === 0) h = 12;
          return `${pad2(h)}:${pad2(m)}${ampm}`;
        } catch { return ''; }
      };
      const formatGeneratedAt = (val) => { if (!val) return ''; try { const d = new Date(val); if (isNaN(d.getTime())) return String(val); return `${fmtDateLong(d)} ${fmtTime(d)}`; } catch { return String(val); } };
      const getYear = (val) => { try { const d = new Date(val); return isNaN(d.getTime()) ? (new Date()).getFullYear() : d.getFullYear(); } catch { return (new Date()).getFullYear(); } };
      const makeEmpCode = (id, year) => `EMP${year}-${String(id || '').padStart(3, '0')}`;
      // Resolve current generator name for "Generated By"
      const genByName = (() => {
        try {
          const u = (typeof me !== 'undefined' && me) ? me : null;
          if (!u) return '';
          const fn = u.first_name || u.firstName || '';
          const ln = u.last_name || u.lastName || '';
          const full = `${fn} ${ln}`.trim();
          return full || u.username || u.email || '';
        } catch { return ''; }
      })();

      // Pull all rows with current filters
      const res = await listReports(type, Object.assign({}, filters), 1, 100000);
      let items = Array.isArray(res?.items) ? res.items : [];
      // Attendance: auto-generate snapshot if empty and dates provided
      if (type === 'attendance' && (!items || items.length === 0)) {
        const hasDates = filters && filters.start_date && filters.end_date;
        if (!hasDates) { await safeToast('Select Start Date and End Date to export Attendance.', 'warning'); return; }
        try { await generateReport('attendance', filters); } catch {}
        const res2 = await listReports('attendance', Object.assign({}, filters), 1, 100000);
        items = Array.isArray(res2?.items) ? res2.items : [];
      }
      // Employees: auto-generate snapshot if empty (uses department/status filters)
      if (type === 'employee' && (!items || items.length === 0)) {
        try { await generateReport('employee', filters || {}); } catch {}
        const res2 = await listReports('employee', Object.assign({}, filters), 1, 100000);
        items = Array.isArray(res2?.items) ? res2.items : [];
      }
      // Departments: auto-generate snapshot if empty (uses department filter)
      if (type === 'department' && (!items || items.length === 0)) {
        try { await generateReport('department', filters || {}); } catch {}
        const res2 = await listReports('department', Object.assign({}, filters), 1, 100000);
        items = Array.isArray(res2?.items) ? res2.items : [];
      }
      // Deductions: auto-generate snapshot if empty (uses optional date range and department filters)
      if (type === 'deduction' && (!items || items.length === 0)) {
        try { await generateReport('deduction', filters || {}); } catch {}
        const res2 = await listReports('deduction', Object.assign({}, filters), 1, 100000);
        items = Array.isArray(res2?.items) ? res2.items : [];
        if (!items || items.length === 0) {
          try {
            const res3 = await listReports('deduction', {}, 1, 100000);
            items = Array.isArray(res3?.items) ? res3.items : [];
          } catch {}
        }
      }
      if (!items.length) { if (type !== 'deduction') { await safeToast('No data to export', 'warning'); return; } }
      // Custom attendance export per requested format
      if (type === 'attendance') {
        // Headers exactly as specified
        const headersAtt = [
          'Report ID',
          'Attendance ID',
          'Employee ID',
          'Employee Name',
          'Period Start',
          'Period End',
          'Days Present',
          'Days Absent',
          'Days Leave',
          'Days Late',
          'Total Hours Worked',
          'Generated By',
          'Generated At'
        ];
        const aoa = [headersAtt.slice()];
        const pad2 = (n) => String(n).padStart(2, '0');
        const formatDateTime = (val) => {
          try { const d = new Date(val); if (isNaN(d.getTime())) return String(val||''); return `${d.getFullYear()}-${pad2(d.getMonth()+1)}-${pad2(d.getDate())} ${pad2(d.getHours())}:${pad2(d.getMinutes())}`; } catch { return String(val||''); }
        };
        items.forEach((r, idx) => {
          const rid = idx + 1;
          const attId = Number(r.Attendance_ID ?? r.attendance_id ?? 0);
          const rawEmpId = Number(r.Employee_ID ?? r.employee_id ?? 0);
          const year = getYear(r.Period_End || r.period_end || r.Period_Start || r.period_start || r.Generated_At || r.generated_at);
          const empCode = `EMP${year}-${String(rawEmpId || '').padStart(3,'0')}`;
          const empName = toTitle(`${r.first_name || ''} ${r.last_name || ''}`.trim());
          const ps = fmtDateLong(r.Period_Start || r.period_start || '');
          const pe = fmtDateLong(r.Period_End || r.period_end || '');
          const dp = Number(r.Days_Present ?? r.days_present ?? 0);
          const da = Number(r.Days_Absent ?? r.days_absent ?? 0);
          const dlv = Number(r.Days_Leave ?? r.days_leave ?? 0);
          const dlte = Number(r.Days_Late ?? r.days_late ?? 0);
          const hrs = Number(r.Total_Hours_Worked ?? r.total_hours_worked ?? 0);
          const genBy = genByName;
          const genAt = fmtDateLong(r.Generated_At || r.generated_at || '');
          aoa.push([rid, attId, empCode, empName, ps, pe, dp, da, dlv, dlte, hrs, genBy, genAt]);
        });
        const ws = XLSX.utils.aoa_to_sheet(aoa);
        // Column widths
        const colCount = headersAtt.length;
        const wscols = new Array(colCount).fill(0).map((_, ci) => {
          let maxLen = headersAtt[ci] ? String(headersAtt[ci]).length + 2 : 10;
          for (let ri = 1; ri < aoa.length; ri++) {
            const v = aoa[ri][ci];
            const s = (v == null) ? '' : (typeof v === 'number' ? String(v) : String(v));
            if (s.length + 2 > maxLen) maxLen = Math.min(60, s.length + 2);
          }
          return { wch: Math.max(12, maxLen) };
        });
        ws['!cols'] = wscols;
        // Number formatting: integers and decimal for hours
        const range = XLSX.utils.decode_range(ws['!ref']);
        const intCols = [0,1,6,7,8,9]; // Report ID, Attendance ID, Days*
        const decCols = [10]; // Total Hours Worked
        for (let R = 1; R <= range.e.r; ++R) {
          for (const C of intCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell) { const n = Number(cell.v); if (Number.isFinite(n)) { cell.v = n; cell.t = 'n'; cell.z = '#,##0'; } }
          }
          for (const C of decCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell) { const n = Number(cell.v); if (Number.isFinite(n)) { cell.v = n; cell.t = 'n'; cell.z = '#,##0.00'; } }
          }
        }
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Attendance');
        const fname = `attendance_reports_${new Date().toISOString().replace(/[-:TZ]/g,'').slice(0,14)}.xlsx`;
        XLSX.writeFile(wb, fname);
        return;
      }
      // Custom employees export per requested format
      if (type === 'employee') {
        const headersEmp = [
          'Report ID',
          'Employee ID',
          'Employee Name',
          'Department',
          'Position',
          'Basic Salary',
          'Status',
          'Date Hired',
          'Generated By',
          'Generated At'
        ];
        const aoa = [headersEmp.slice()];
        const pad2 = (n) => String(n).padStart(2, '0');
        const fmtYmd = (val) => {
          try { const d = new Date(val); if (isNaN(d.getTime())) return String(val||''); return `${d.getFullYear()}-${pad2(d.getMonth()+1)}-${pad2(d.getDate())}`; } catch { return String(val||''); }
        };
        const fmtDateTime = (val) => {
          try { const d = new Date(val); if (isNaN(d.getTime())) return String(val||''); return `${d.getFullYear()}-${pad2(d.getMonth()+1)}-${pad2(d.getDate())} ${pad2(d.getHours())}:${pad2(d.getMinutes())}`; } catch { return String(val||''); }
        };
        items.forEach((r, idx) => {
          const rid = idx + 1;
          const rawEmpId = Number(r.Employee_ID ?? r.employee_id ?? 0);
          const year = getYear(r.Date_Hired || r.date_hired || r.Generated_At || r.generated_at);
          const empCode = `EMP${year}-${String(rawEmpId || '').padStart(3,'0')}`;
          const empName = toTitle(`${r.first_name || ''} ${r.last_name || ''}`.trim());
          const dept = toTitle(r.dept_name || r.department || '');
          const pos = r.Position ?? r.position ?? '';
          const basic = Number(r.Basic_Salary ?? r.basic_salary ?? 0);
          const status = toTitle(r.Status || r.status || '');
          const dateHired = fmtDateLong(r.Date_Hired || r.date_hired || '');
          const genBy = genByName;
          const genAt = fmtDateLong(r.Generated_At || r.generated_at || '');
          aoa.push([rid, empCode, empName, dept, pos, basic, status, dateHired, genBy, genAt]);
        });
        const ws = XLSX.utils.aoa_to_sheet(aoa);
        // Column widths
        const colCount = headersEmp.length;
        const wscols = new Array(colCount).fill(0).map((_, ci) => {
          let maxLen = headersEmp[ci] ? String(headersEmp[ci]).length + 2 : 10;
          for (let ri = 1; ri < aoa.length; ri++) {
            const v = aoa[ri][ci];
            const s = (v == null) ? '' : (typeof v === 'number' ? String(v) : String(v));
            if (s.length + 2 > maxLen) maxLen = Math.min(60, s.length + 2);
          }
          return { wch: Math.max(12, maxLen) };
        });
        ws['!cols'] = wscols;
        // Number formatting: Report ID, Employee ID as integers; Basic Salary as currency/decimal
        const range = XLSX.utils.decode_range(ws['!ref']);
        const intCols = [0]; // Report ID
        const moneyCols = [5]; // Basic Salary
        for (let R = 1; R <= range.e.r; ++R) {
          for (const C of intCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell) { const n = Number(cell.v); if (Number.isFinite(n)) { cell.v = n; cell.t = 'n'; cell.z = '#,##0'; } }
          }
          for (const C of moneyCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell) { const n = Number(cell.v); if (Number.isFinite(n)) { cell.v = n; cell.t = 'n'; cell.z = '#,##0.00'; } }
          }
        }
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Employees');
        const fname = `employees_reports_${new Date().toISOString().replace(/[-:TZ]/g,'').slice(0,14)}.xlsx`;
        XLSX.writeFile(wb, fname);
        return;
      }
      // Custom departments export per requested format
      if (type === 'department') {
        const headersDept = [
          'Report ID',
          'Department ID',
          'Department Name',
          'Total Employees',
          'Total Salary',
          'Average Salary Per Employee',
          'Generated By',
          'Generated At'
        ];
        const aoa = [headersDept.slice()];
        const pad2 = (n) => String(n).padStart(2, '0');
        const fmtDateTime = (val) => {
          try { const d = new Date(val); if (isNaN(d.getTime())) return String(val||''); return `${d.getFullYear()}-${pad2(d.getMonth()+1)}-${pad2(d.getDate())} ${pad2(d.getHours())}:${pad2(d.getMinutes())}`; } catch { return String(val||''); }
        };
        items.forEach((r, idx) => {
          const rid = idx + 1;
          const deptId = Number(r.Department_ID ?? r.department_id ?? 0);
          const deptName = toTitle(r.dept_name || r.department || '');
          const totalEmp = Number(r.Total_Employees ?? r.total_employees ?? 0);
          const totalSalary = Number(r.Total_Salary ?? r.total_salary ?? 0);
          const avgSalary = totalEmp > 0 ? (totalSalary / totalEmp) : 0;
          const genBy = genByName;
          const genAt = fmtDateLong(r.Generated_At || r.generated_at || '');
          aoa.push([rid, deptId, deptName, totalEmp, totalSalary, avgSalary, genBy, genAt]);
        });
        const ws = XLSX.utils.aoa_to_sheet(aoa);
        // Column widths
        const colCount = headersDept.length;
        const wscols = new Array(colCount).fill(0).map((_, ci) => {
          let maxLen = headersDept[ci] ? String(headersDept[ci]).length + 2 : 10;
          for (let ri = 1; ri < aoa.length; ri++) {
            const v = aoa[ri][ci];
            const s = (v == null) ? '' : (typeof v === 'number' ? String(v) : String(v));
            if (s.length + 2 > maxLen) maxLen = Math.min(60, s.length + 2);
          }
          return { wch: Math.max(12, maxLen) };
        });
        ws['!cols'] = wscols;
        // Number formatting: IDs and counts as integers; salary columns as currency/decimal
        const range = XLSX.utils.decode_range(ws['!ref']);
        const intCols = [0,1,3]; // Report ID, Department ID, Total Employees
        const moneyCols = [4,5]; // Total Salary, Average Salary
        for (let R = 1; R <= range.e.r; ++R) {
          for (const C of intCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell) { const n = Number(cell.v); if (Number.isFinite(n)) { cell.v = n; cell.t = 'n'; cell.z = '#,##0'; } }
          }
          for (const C of moneyCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell) { const n = Number(cell.v); if (Number.isFinite(n)) { cell.v = n; cell.t = 'n'; cell.z = '#,##0.00'; } }
          }
        }
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Departments');
        const fname = `department_reports_${new Date().toISOString().replace(/[-:TZ]/g,'').slice(0,14)}.xlsx`;
        XLSX.writeFile(wb, fname);
        return;
      }
      // Custom deductions export per requested format
      if (type === 'deduction') {
        const headersDed = [
          'Report ID',
          'Deduction ID',
          'Deduction Type',
          'Employee ID',
          'Employee Name',
          'Payroll ID',
          'Deduction Amount',
          'Period Start',
          'Period End',
          'Generated By',
          'Generated At'
        ];
        const aoa = [headersDed.slice()];
        const totalsByEmp = new Map(); // key: employee_id (fallback name), val: { id, name, total }
        items.forEach((r, idx) => {
          const rid = idx + 1;
          const dedId = Number(r.Deduction_ID ?? r.deduction_id ?? 0);
          const dtype = String(r.deduction_name ?? r.Deduction_Type ?? r.deduction_type ?? '').trim();
          const empId = Number(r.Employee_ID ?? r.employee_id ?? 0);
          const empName = toTitle(`${r.first_name || ''} ${r.last_name || ''}`.trim());
          const payrollId = Number(r.Payroll_ID ?? r.payroll_id ?? 0);
          const amount = Number(r.Deduction_Amount ?? r.deduction_amount ?? 0);
          const ps = fmtDateLong(r.Period_Start || r.period_start || '');
          const pe = fmtDateLong(r.Period_End || r.period_end || '');
          const genBy = genByName;
          const genAt = fmtDateLong(r.Generated_At || r.generated_at || '');
          aoa.push([rid, dedId, dtype, empId || '', empName, payrollId || '', amount, ps, pe, genBy, genAt]);
          // accumulate totals per employee (skip if no id and no name)
          const key = empId || empName || null;
          if (key != null && key !== '') {
            const t = totalsByEmp.get(key) || { id: empId || '', name: empName, total: 0 };
            t.total += Number.isFinite(amount) ? amount : 0;
            totalsByEmp.set(key, t);
          }
        });
        // Append optional totals per employee section
        if (totalsByEmp.size > 0) {
          aoa.push([]);
          aoa.push(['', '', '', '', 'Total Deductions Per Employee', '', '', '', '', '', '']);
          Array.from(totalsByEmp.values())
            .sort((a,b)=> String(a.name).localeCompare(String(b.name)))
            .forEach(t => {
              aoa.push(['', '', '', t.id, t.name, '', t.total, '', '', '', '']);
            });
        }
        const ws = XLSX.utils.aoa_to_sheet(aoa);
        // Column widths
        const colCount = headersDed.length;
        const wscols = new Array(colCount).fill(0).map((_, ci) => {
          let maxLen = headersDed[ci] ? String(headersDed[ci]).length + 2 : 10;
          for (let ri = 1; ri < aoa.length; ri++) {
            const v = aoa[ri][ci];
            const s = (v == null) ? '' : (typeof v === 'number' ? String(v) : String(v));
            if (s.length + 2 > maxLen) maxLen = Math.min(60, s.length + 2);
          }
          return { wch: Math.max(12, maxLen) };
        });
        ws['!cols'] = wscols;
        // Number formats
        const range = XLSX.utils.decode_range(ws['!ref']);
        const intCols = [0,1,3,5]; // Report ID, Deduction ID, Employee ID, Payroll ID
        const moneyCols = [6]; // Deduction Amount
        for (let R = 1; R <= range.e.r; ++R) {
          for (const C of intCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell) { const n = Number(cell.v); if (Number.isFinite(n)) { cell.v = n; cell.t = 'n'; cell.z = '#,##0'; } }
          }
          for (const C of moneyCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell) { const n = Number(cell.v); if (Number.isFinite(n)) { cell.v = n; cell.t = 'n'; cell.z = '#,##0.00'; } }
          }
        }
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Deductions');
        const fname = `deduction_reports_${new Date().toISOString().replace(/[-:TZ]/g,'').slice(0,14)}.xlsx`;
        XLSX.writeFile(wb, fname);
        return;
      }
      // Define headers per tab
      const headers = (() => {
        if (type === 'payroll') return ['Report ID','Payroll ID','Employee ID','Employee Name','Period Start','Period End','Basic Salary','Total Deductions','Net Pay','Generated By','Generated At'];
        if (type === 'attendance') return ['Report_ID','Employee_ID','first_name','last_name','Period_Start','Period_End','Days_Present','Days_Absent','Days_Leave','Days_Late','Total_Hours_Worked','Generated_By','Generated_At'];
        if (type === 'employee') return ['Report_ID','Employee_ID','dept_name','Position','Basic_Salary','Status','Date_Hired','Generated_By','Generated_At'];
        if (type === 'department') return ['Report_ID','Department_ID','dept_name','Total_Employees','Total_Salary','Generated_By','Generated_At'];
        if (type === 'deduction') return ['Report_ID','Employee_ID','first_name','last_name','Deduction_ID','deduction_name','Deduction_Amount','Payroll_ID','Period_Start','Period_End','Generated_By','Generated_At'];
        return Object.keys(items[0]);
      })();
      const aoa = [headers.slice()];
      let totals = null;
      if (type === 'payroll') {
        let sumBasic = 0, sumDed = 0, sumNet = 0;
        items.forEach((r, idx) => {
          const displayId = idx + 1; // start from 1
          const payrollId = r.Payroll_ID ?? '';
          const year = getYear(r.Period_End || r.period_end || r.Period_Start || r.period_start || r.Generated_At || r.created_at);
          const empCode = makeEmpCode(r.Employee_ID ?? r.employee_id ?? '', year);
          const empName = `${r.first_name || ''} ${r.last_name || ''}`.trim();
          const ps = fmtDateLong(r.Period_Start || r.period_start || '');
          const pe = fmtDateLong(r.Period_End || r.period_end || '');
          const basic = Number(r.Basic_Salary ?? r.basic_salary ?? 0);
          const ded = Number(r.Total_Deductions ?? r.total_deductions ?? 0);
          const net = Number(r.Net_Pay ?? r.net_pay ?? 0);
          const genBy = genByName;
          const genAt = formatGeneratedAt(r.Generated_At || r.generated_at || '');
          sumBasic += basic; sumDed += ded; sumNet += net;
          aoa.push([displayId, payrollId, empCode, empName, ps, pe, basic, ded, net, genBy, genAt]);
        });
        totals = ['', '', '', 'TOTAL', '', '', sumBasic, sumDed, sumNet, '', ''];
      } else {
        for (const r of items) {
          const row = headers.map(h => (r[h] !== undefined ? r[h] : (r[String(h).toLowerCase()] !== undefined ? r[String(h).toLowerCase()] : '')));
          aoa.push(row);
        }
        // Transform Employee_ID, Report_ID, Period dates, and Generated_At formatting for non-payroll
        const idxRid = headers.indexOf('Report_ID');
        const idxEmp = headers.indexOf('Employee_ID');
        const idxGenAt = headers.indexOf('Generated_At');
        const idxGenBy = headers.indexOf('Generated_By');
        const idxPS = headers.indexOf('Period_Start');
        const idxPE = headers.indexOf('Period_End');
        for (let i = 0; i < items.length; i++) {
          const r = items[i];
          const rowIx = i + 1; // account for header row
          if (idxRid >= 0) aoa[rowIx][idxRid] = i + 1;
          if (idxEmp >= 0) {
            const year = getYear(r.Period_End || r.period_end || r.Period_Start || r.period_start || r.Generated_At || r.created_at);
            aoa[rowIx][idxEmp] = makeEmpCode(r.Employee_ID ?? r.employee_id ?? '', year);
          }
          if (idxPS >= 0) aoa[rowIx][idxPS] = fmtDateLong(r.Period_Start || r.period_start || aoa[rowIx][idxPS]);
          if (idxPE >= 0) aoa[rowIx][idxPE] = fmtDateLong(r.Period_End || r.period_end || aoa[rowIx][idxPE]);
          if (idxGenAt >= 0) aoa[rowIx][idxGenAt] = fmtDateLong(r.Generated_At || r.generated_at || aoa[rowIx][idxGenAt]);
          if (idxGenBy >= 0) aoa[rowIx][idxGenBy] = genByName;
        }
      }
      if (totals) aoa.push(totals);
      const ws = XLSX.utils.aoa_to_sheet(aoa);
      // Compute column widths (wch) from AOA content
      const colCount = headers.length;
      const wscols = new Array(colCount).fill(0).map((_, ci) => {
        let maxLen = headers[ci] ? String(headers[ci]).length + 2 : 10;
        for (let ri = 1; ri < aoa.length; ri++) {
          const v = aoa[ri][ci];
          const s = (v == null) ? '' : (typeof v === 'number' ? String(v) : String(v));
          if (s.length + 2 > maxLen) maxLen = Math.min(60, s.length + 2);
        }
        return { wch: Math.max(12, maxLen) };
      });
      ws['!cols'] = wscols;
      // Optionally set number formats for payroll numeric columns
      if (type === 'payroll') {
        const numCols = [6,7,8]; // Basic, Ded, Net (0-based index in headers)
        const range = XLSX.utils.decode_range(ws['!ref']);
        for (let R = 1; R <= range.e.r; ++R) {
          for (const C of numCols) {
            const cell = ws[XLSX.utils.encode_cell({ r: R, c: C })];
            if (cell && typeof cell.v === 'number') { cell.t = 'n'; cell.z = '#,##0.00'; }
          }
        }
      }
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, toTitle(type || 'Report'));
      const fname = `${type || 'reports'}_reports_${new Date().toISOString().replace(/[-:TZ]/g,'').slice(0,14)}.xlsx`;
      XLSX.writeFile(wb, fname);
    } catch (e) {
      await safeToast('Excel export failed. Falling back to CSV...', 'warning');
      const params = new URLSearchParams(Object.assign({ operation: 'exportReports', type }, filters || {})).toString();
      openCsv(`${api}/reports.php?${params}`);
    }
  }
  async function downloadReportItem(type, id) {
    const res = await axios.get(`${api}/reports.php`, { params: { operation: 'downloadReport', type, id } });
    const data = res.data && res.data.item ? res.data.item : res.data;
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    downloadBlob(blob, `${type}_report_${id}.json`);
  }

  // Charts
  async function renderAttendanceCharts(containerId) {
    try {
      const wrap = document.getElementById(containerId);
      if (!wrap) return;
      wrap.innerHTML = `<div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <div class="bg-white rounded-lg shadow p-4"><h6 class="font-semibold mb-2">Attendance (Last 7 days)</h6><canvas id="att7"></canvas></div>
        <div class="bg-white rounded-lg shadow p-4"><h6 class="font-semibold mb-2">Attendance (Last 30 days)</h6><canvas id="att30"></canvas></div>
      </div>`;
      const load = async (period, canvasId) => {
        const res = await axios.get(`${api}/reports.php`, { params: { operation: 'attendanceOverview', period } });
        const d = res.data || {};
        const ctx = document.getElementById(canvasId).getContext('2d');
        new Chart(ctx, {
          type: 'bar',
          data: { labels: d.labels || [], datasets: [
            { label: 'Present', data: d.present || [], backgroundColor: 'rgba(34,197,94,0.5)' },
            { label: 'Late', data: d.late || [], backgroundColor: 'rgba(234,179,8,0.5)' },
            { label: 'Absent', data: d.absent || [], backgroundColor: 'rgba(239,68,68,0.5)' },
            { label: 'On Leave', data: d.onLeave || [], backgroundColor: 'rgba(59,130,246,0.5)' }
          ] },
          options: { responsive: true, scales: { x: { stacked: true }, y: { stacked: true } } }
        });
      };
      await load('week', 'att7');
      await load('month', 'att30');
    } catch {}
  }
  async function renderPayrollTrendChart(containerId, months = 6) {
    try {
      const wrap = document.getElementById(containerId);
      if (!wrap) return;
      wrap.innerHTML = `<div class="bg-white rounded-lg shadow p-4"><div class="flex items-center justify-between"><h6 class="font-semibold mb-2">Payroll Expense Trend (Last ${months} months)</h6><div><select id="trend-months" class="border rounded px-2 py-1 text-sm"><option>3</option><option selected>6</option><option>12</option></select></div></div><canvas id="payTrend"></canvas></div>`;
      async function load(m) {
        const res = await axios.get(`${api}/reports.php`, { params: { operation: 'payrollTrend', months: m } });
        const d = res.data || { labels: [], expenses: [] };
        const ctx = document.getElementById('payTrend').getContext('2d');
        if (window.__payTrend) { try { window.__payTrend.destroy(); } catch {} }
        window.__payTrend = new Chart(ctx, { type: 'line', data: { labels: d.labels, datasets: [{ label: 'Total Expense', data: d.expenses, borderColor: '#2563eb', backgroundColor: 'rgba(37,99,235,0.2)', fill: true }] }, options: { responsive: true } });
      }
      const sel = document.getElementById('trend-months');
      sel.value = String(months);
      sel.addEventListener('change', async () => { await load(parseInt(sel.value, 10)); });
      await load(months);
    } catch {}
  }

  // UI shell
  app.innerHTML = `
    <div class="flex items-center justify-between mb-4">
      <h4 class="text-xl font-semibold">Reports</h4>
          </div>
    <div class="bg-white rounded-lg shadow">
      <div class="border-b px-3 pt-3">
        <nav class="-mb-px flex gap-3 text-sm" id="rep-tabs">
          <button data-tab="payroll" class="px-3 py-2 border-b-2 border-transparent hover:border-primary-600">Payroll</button>
          <button data-tab="attendance" class="px-3 py-2 border-b-2 border-transparent hover:border-primary-600">Attendance</button>
          <button data-tab="employee" class="px-3 py-2 border-b-2 border-transparent hover:border-primary-600">Employees</button>
          <button data-tab="department" class="px-3 py-2 border-b-2 border-transparent hover:border-primary-600">Departments</button>
          <button data-tab="deduction" class="px-3 py-2 border-b-2 border-transparent hover:border-primary-600">Deductions</button>
        </nav>
      </div>
      <div class="p-4">
        <div id="filter-wrap" class="mb-3 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3"></div>
        <div class="flex items-center gap-2 mb-4">
          <button id="btn-generate" class="px-3 py-2 text-sm rounded bg-primary-600 text-white">Generate Report</button>
                    <button id="btn-export-pdf" class="px-3 py-2 text-sm rounded border">Export to PDF</button>
          <button id="btn-export-excel" class="px-3 py-2 text-sm rounded border">Export to Excel</button>
          <button id="btn-print" class="px-3 py-2 text-sm rounded border">Print</button>
        </div>
        <div id="summary-widgets" class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-4"></div>
        <div id="chart-area" class="mb-4"></div>
        <div id="table-wrap" class="overflow-x-auto"></div>
        <div id="pager" class="mt-3 flex items-center justify-between text-sm text-gray-600"></div>
      </div>
    </div>`;

  // State
  let activeTab = 'payroll';
  let employees = await getEmployees();
  let departments = await getDepartments();
  let me = await getMe();
  const generatorName = (() => { try { const fn = me?.first_name || me?.firstName || ''; const ln = me?.last_name || me?.lastName || ''; const full = `${fn} ${ln}`.trim(); return full || me?.username || me?.email || ''; } catch { return ''; } })();
  let page = 1, limit = 20, total = 0, items = [];

  // Build filters per tab
  function filterSchema(tab) {
    const common = [
            { key: 'department_id', label: 'Department', type: 'department', show: tab !== 'department' ? true : true },
      { key: 'start_date', label: 'Start Date', type: 'date', show: ['payroll','attendance','deduction'].includes(tab) },
      { key: 'end_date', label: 'End Date', type: 'date', show: ['payroll','attendance','deduction'].includes(tab) },
    ];
    if (tab === 'employee') { common.push({ key: 'status', label: 'Status', type: 'select', options: ['', 'active', 'inactive'], show: true }); }
    return common.filter(x => x.show);
  }
  function getFiltersFromUI() {
    const wrap = document.getElementById('filter-wrap');
    const obj = {};
    wrap.querySelectorAll('[data-key]').forEach(el => { const k = el.getAttribute('data-key'); obj[k] = el.value || ''; });
    // Normalize empty to undefined
    Object.keys(obj).forEach(k => { if (obj[k] === '') delete obj[k]; });
    return obj;
  }
  function setActiveTab(tab) {
    activeTab = tab;
    // Tabs visual
    document.querySelectorAll('#rep-tabs [data-tab]').forEach(btn => {
      btn.classList.remove('border-primary-600', 'text-primary-700');
      if (btn.getAttribute('data-tab') === tab) btn.classList.add('border-primary-600', 'text-primary-700');
    });
    // Filters
    const schema = filterSchema(tab);
    const wrap = document.getElementById('filter-wrap');
    wrap.innerHTML = schema.map(s => {
      if (s.type === 'employee') {
        const opts = employees.map(e => `<option value="${e.employee_id}">${toTitle(`${e.first_name || ''} ${e.last_name || ''}`)}</option>`).join('');
        return `<div><label class="block text-xs text-gray-600 mb-1">${s.label}</label><select data-key="${s.key}" class="w-full border rounded px-2 py-1"><option value="">All</option>${opts}</select></div>`;
      }
      if (s.type === 'department') {
        const opts = departments.map(d => `<option value="${d && d.dept_id ? d.dept_id : ''}">${toTitle(d && d.dept_name ? d.dept_name : d)}</option>`).join('');
        // Prefer dept_id mapping if departments is an array of objects, else names only (no value)
        if (departments.length && typeof departments[0] === 'object' && departments[0].dept_id) {
          return `<div><label class="block text-xs text-gray-600 mb-1">${s.label}</label><select data-key="${s.key}" class="w-full border rounded px-2 py-1"><option value="">All</option>${opts}</select></div>`;
        } else {
          // Need lookup on server side via EXISTS mapping in generate and list; not providing dept_id then
          return `<div><label class="block text-xs text-gray-600 mb-1">${s.label}</label><select data-key="${s.key}" class="w-full border rounded px-2 py-1"><option value="">All</option>${(departments||[]).map((d,i)=>`<option value="">${toTitle(d)}</option>`).join('')}</select></div>`;
        }
      }
      if (s.type === 'select') {
        const opts = (s.options || []).map(v => `<option value="${v}">${v ? toTitle(v) : 'All'}</option>`).join('');
        return `<div><label class="block text-xs text-gray-600 mb-1">${s.label}</label><select data-key="${s.key}" class="w-full border rounded px-2 py-1">${opts}</select></div>`;
      }
      // date
      return `<div><label class="block text-xs text-gray-600 mb-1">${s.label}</label><input type="date" data-key="${s.key}" class="w-full border rounded px-2 py-1" /></div>`;
    }).join('');

    // Widgets and charts per tab
    const widgets = document.getElementById('summary-widgets');
    const charts = document.getElementById('chart-area');
    widgets.innerHTML = '';
    charts.innerHTML = '';
    if (tab === 'payroll') {
      widgets.innerHTML = `<div class="rounded-lg bg-white shadow p-3"><div class="text-xs text-gray-500">Compare Across Months</div><div id="payroll-trend-wrap"></div></div>`;
      renderPayrollTrendChart('payroll-trend-wrap', 6);
    } else if (tab === 'attendance') {
      charts.innerHTML = `<div id="att-charts"></div>`;
      renderAttendanceCharts('att-charts');
    } else if (tab === 'department') {
      // Pie-like simple breakdown built from current list when loaded
      charts.innerHTML = `<div class="bg-white rounded-lg shadow p-4"><h6 class="font-semibold mb-2">Employees per Department</h6><div id="dept-pie" class="text-sm text-gray-700">Run Search to render</div></div>`;
    }

    // Reset paging but do NOT auto-load reports
    page = 1;
    
    // Clear any existing report content
    const tw = document.getElementById('table-wrap');
    if (tw) {
      tw.innerHTML = '<div class="text-center text-gray-500 py-8">No data.</div>';
    }
  }

  // Safely parse formatted currency/number strings into a numeric value
  function toNumber(val){
    if (typeof val === 'number') return Number.isFinite(val) ? val : 0;
    const s = String(val || '').replace(/[^0-9.-]/g, '');
    const n = Number(s);
    return Number.isFinite(n) ? n : 0;
  }
  function groupDeductions(rows) {
    const map = new Map();
    (rows || []).forEach((r) => {
      const empId = r.Employee_ID ?? r.employee_id ?? '';
      const first = String(r.first_name || '').trim();
      const last = String(r.last_name || '').trim();
      const payrollId = r.Payroll_ID ?? r.payroll_id ?? '';
      const ps = r.Period_Start || r.period_start || '';
      const pe = r.Period_End || r.period_end || '';
      const key = [empId, payrollId, ps, pe].join('||');
      const amt = toNumber(r.Deduction_Amount ?? r.deduction_amount ?? 0);
      const dtype = String(r.deduction_name ?? r.Deduction_Type ?? r.deduction_type ?? '').toLowerCase();
      const genAt = r.Generated_At || r.generated_at || '';
      let g = map.get(key);
      if (!g) {
        g = { Employee_ID: empId, first_name: first, last_name: last, Payroll_ID: payrollId, Period_Start: ps, Period_End: pe, Generated_At: genAt, philhealth: 0, sss: 0, pagibig: 0, withholding: 0, total: 0 };
        map.set(key, g);
      }
      let matched = false;
      if (/phil/i.test(dtype)) { g.philhealth += amt; matched = true; }
      else if (/sss/i.test(dtype)) { g.sss += amt; matched = true; }
      else if (/pag-?ibig/i.test(dtype)) { g.pagibig += amt; matched = true; }
      else if (/(withhold|withholding|w[-\/.\s]*tax|wtax|wht|income\s*tax|\btax\b)/i.test(dtype)) { g.withholding += amt; matched = true; }
      // Fallbacks when deduction_name/type is missing or uses separate columns
      if (!matched) {
        const altPH = toNumber(r.philhealth_deduction ?? r.PhilHealth_Deduction ?? 0);
        const altSSS = toNumber(r.sss_deduction ?? r.SSS_Deduction ?? 0);
        const altPagibig = toNumber(r.pagibig_deduction ?? r.Pag_Ibig_Deduction ?? r.PagIbig_Deduction ?? 0);
        const altTax = toNumber(r.tax_deduction ?? r.Tax_Deduction ?? r.withholding_deduction ?? r.Withholding_Deduction ?? r.Withholding_Deductions ?? 0);
        if (altPH) g.philhealth += altPH;
        if (altSSS) g.sss += altSSS;
        if (altPagibig) g.pagibig += altPagibig;
        if (altTax) g.withholding += altTax;
        // If no specific alt fields, attribute generic amount to total bucket (do not add to any specific type)
        if (!altPH && !altSSS && !altPagibig && !altTax && amt) {
          // unable to classify; attribute to withholding as a last resort
          g.withholding += amt;
          matched = true;
        }
      }
    });
    // finalize totals from component sums to avoid double counting
    const out = Array.from(map.values());
    out.forEach(g => { g.total = Number(g.philhealth) + Number(g.sss) + Number(g.pagibig) + Number(g.withholding); });
    return out;
  }

  // Build a map of payroll tax (withholding) by employee+payroll and employee+period
  function buildPayrollTaxMap(rows){
    const map = new Map();
    (rows || []).forEach((r) => {
      const emp = String(r.Employee_ID ?? r.employee_id ?? '').trim();
      const pid = String(r.Payroll_ID ?? r.payroll_id ?? '').trim();
      const ps = String(r.Period_Start ?? r.period_start ?? '').trim();
      const pe = String(r.Period_End ?? r.period_end ?? '').trim();
      const tax = toNumber(r.Tax_Deduction ?? r.tax_deduction ?? r.Withholding_Deduction ?? r.withholding_deduction ?? r.Withholding_Deductions ?? 0);
      if (!emp) return;
      if (pid) map.set(`${emp}||${pid}`, tax);
      if (ps && pe) map.set(`${emp}||${ps}||${pe}`, tax);
    });
    return map;
  }
  function attachPayrollWithholding(groups, pmap){
    return (groups || []).map((g) => {
      const emp = String(g.Employee_ID ?? '').trim();
      const pid = String(g.Payroll_ID ?? '').trim();
      const ps = String(g.Period_Start ?? g.period_start ?? '').trim();
      const pe = String(g.Period_End ?? g.period_end ?? '').trim();
      let w = toNumber(g.withholding || 0);
      if (!w) {
        let tax = null;
        if (emp && pid && pmap.has(`${emp}||${pid}`)) tax = pmap.get(`${emp}||${pid}`);
        else if (emp && ps && pe && pmap.has(`${emp}||${ps}||${pe}`)) tax = pmap.get(`${emp}||${ps}||${pe}`);
        if (toNumber(tax) > 0) w = toNumber(tax);
      }
      const enriched = Object.assign({}, g, { withholding: w });
      enriched.total = toNumber(enriched.philhealth) + toNumber(enriched.sss) + toNumber(enriched.pagibig) + toNumber(enriched.withholding);
      return enriched;
    });
  }

  async function loadList() {
    try {
      const filters = getFiltersFromUI();
      const data = await listReports(activeTab, filters, page, limit);
      items = Array.isArray(data.items) ? data.items : [];
      total = parseInt(data.total || 0, 10);
      if (activeTab === 'deduction') {
        const grouped = groupDeductions(items);
        // Load payroll data to mirror Withholding shown in Payroll Details
        let payItems = [];
        try {
          const payRes = await listReports('payroll', filters, 1, 100000);
          payItems = Array.isArray(payRes?.items) ? payRes.items : [];
        } catch {}
        const pmap = buildPayrollTaxMap(payItems);
        items = attachPayrollWithholding(grouped, pmap);
        total = items.length;
      }
      renderTable();
      renderPager();
      if (activeTab === 'department') renderDeptPie();
    } catch (e) {
      const tw = document.getElementById('table-wrap');
      tw.innerHTML = '<div class="text-red-600">Failed to load reports</div>';
    }
  }

  function renderTable() {
    const tw = document.getElementById('table-wrap');
    if (!items.length) { tw.innerHTML = '<div class="text-sm text-gray-500">No records</div>'; return; }
    const fields = (() => {
      if (activeTab === 'payroll') return ['Report_ID','Full_Name','Period_Start','Period_End','Basic_Salary','Total_Deductions','Net_Pay','Generated_By','Generated_At'];
      if (activeTab === 'attendance') return ['Report_ID','Full_Name','Period_Start','Period_End','Days_Present','Days_Absent','Days_Leave','Days_Late','Total_Hours_Worked','Generated_By','Generated_At'];
      if (activeTab === 'employee') return ['Report_ID','Employee_ID','dept_name','Position','Basic_Salary','Status','Date_Hired','Generated_By','Generated_At'];
      if (activeTab === 'department') return ['Report_ID','Department_ID','dept_name','Total_Employees','Total_Salary','Generated_By','Generated_At'];
      if (activeTab === 'deduction') return ['Report_ID','Full_Name','Philhealth_Deduction','SSS_Deduction','Pag_Ibig_Deduction','Withholding_Deductions','Total_Deductions','Payroll_ID','Start_Period_End','Generated_At'];
      return Object.keys(items[0]);
    })();

    const th = fields.map(h => `<th class="px-3 py-2 text-left text-xs font-semibold text-gray-600">${toTitle(h.replace(/_/g,' '))}</th>`).join('');
    const rows = items.map((r, idx) => {
      const tds = fields.map(f => {
        // Custom rendering for Deduction tab columns (grouped per employee + payroll + period)
        if (activeTab === 'deduction') {
          const fmtUS = (s) => {
            try { const d = new Date(s); if (!isNaN(d)) return d.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }); } catch {}
            return String(s || '');
          };
          if (f === 'Philhealth_Deduction') {
            const v = Number(r.philhealth || 0);
            return `<td class="px-3 py-2 text-sm text-gray-700">${v ? peso(v) : ''}</td>`;
          }
          if (f === 'SSS_Deduction') {
            const v = Number(r.sss || 0);
            return `<td class="px-3 py-2 text-sm text-gray-700">${v ? peso(v) : ''}</td>`;
          }
          if (f === 'Pag_Ibig_Deduction') {
            const v = Number(r.pagibig || 0);
            return `<td class="px-3 py-2 text-sm text-gray-700">${v ? peso(v) : ''}</td>`;
          }
          if (f === 'Withholding_Deductions') {
            const v = Number(r.withholding || 0);
            return `<td class="px-3 py-2 text-sm text-gray-700">${v ? peso(v) : ''}</td>`;
          }
          if (f === 'Total_Deductions') {
            const v = Number(r.total || 0);
            return `<td class="px-3 py-2 text-sm text-gray-700">${peso(v)}</td>`;
          }
          if (f === 'Payroll_ID') {
            const id = r.Payroll_ID ?? r.payroll_id ?? '';
            const num = parseInt(id, 10);
            const disp = `PR-${String(Number.isFinite(num) ? num : 0).padStart(3, '0')}`;
            return `<td class="px-3 py-2 text-sm text-gray-700">${disp}</td>`;
          }
          if (f === 'Start_Period_End') {
            const ps = r.Period_Start || r.period_start || '';
            const pe = r.Period_End || r.period_end || '';
            const disp = `${fmtUS(ps)} â†’ ${fmtUS(pe)}`;
            return `<td class="px-3 py-2 text-sm text-gray-700">${disp}</td>`;
          }
          if (f === 'Generated_At') {
            const disp = fmtUS(r.Generated_At || r.generated_at || '');
            return `<td class="px-3 py-2 text-sm text-gray-700">${disp}</td>`;
          }
          // Other fields fall through to default renderer
        }
        let v = r[f];
        if (f === 'Report_ID') { const base = (page - 1) * limit; v = base + idx + 1; }
        if (f === 'Basic_Salary' || f === 'Total_Deductions' || f === 'Net_Pay' || f === 'Total_Salary') v = peso(v);
        if (/^Period_/.test(f) || /_At$/.test(f) || /_Date$/.test(f) || f === 'Date_Hired') v = fmtDate(v);
        if (f === 'Status') v = toTitle(v);
        if (f === 'dept_name') v = toTitle(v);
        if (f === 'Generated_By') v = toTitle(generatorName);
        if (f === 'Full_Name') {
          const fullName = toTitle(`${r.first_name || ''} ${r.last_name || ''}`.trim());
          const rawId = (r.Employee_ID != null ? r.Employee_ID : r.employee_id);
          const yearSrc = r.Period_End || r.period_end || r.Period_Start || r.period_start || r.Generated_At || r.created_at || '';
          let year;
          try { const d = new Date(yearSrc); year = isNaN(d.getTime()) ? new Date().getFullYear() : d.getFullYear(); } catch { year = new Date().getFullYear(); }
          const padded = String(rawId != null ? rawId : '').padStart(3,'0');
          const empCode = `EMP${year}-${padded}`;
          v = `${fullName}<div class="text-xs text-gray-500">${empCode}</div>`;
        }
        if ((f === 'first_name' || f === 'last_name') && !v) v = '';
        return `<td class="px-3 py-2 text-sm text-gray-700">${v != null ? v : ''}</td>`;
      }).join('');
      return `<tr>${tds}</tr>`;
    }).join('');
    tw.innerHTML = `<table class="min-w-full divide-y divide-gray-200"><thead class="bg-gray-50"><tr>${th}</tr></thead><tbody class="divide-y divide-gray-200 bg-white">${rows}</tbody></table>`;
  }

  function renderPager() {
    const pg = document.getElementById('pager');
    const totalPages = Math.max(1, Math.ceil(total / limit));
    if (total === 0) { pg.innerHTML = ''; return; }
    const showingFrom = (page - 1) * limit + 1;
    const showingTo = Math.min(page * limit, total);
    pg.innerHTML = `<div>Showing <span class="font-medium">${showingFrom}</span>â€“<span class="font-medium">${showingTo}</span> of <span class="font-medium">${total}</span></div>
      <div class="flex items-center gap-2">
        <label class="text-sm">Rows</label>
        <select id="pg-size" class="border rounded px-2 py-1 text-sm">
          <option value="10">10</option>
          <option value="20" selected>20</option>
          <option value="50">50</option>
          <option value="100">100</option>
        </select>
        <button id="pg-prev" class="px-2 py-1 text-sm rounded border ${page <= 1 ? 'opacity-50 cursor-not-allowed' : ''}">Prev</button>
        <span>Page ${page} of ${totalPages}</span>
        <button id="pg-next" class="px-2 py-1 text-sm rounded border ${page >= totalPages ? 'opacity-50 cursor-not-allowed' : ''}">Next</button>
      </div>`;
    const sizeSel = document.getElementById('pg-size');
    sizeSel.value = String(limit);
    sizeSel.addEventListener('change', () => { const n = parseInt(sizeSel.value, 10); limit = Number.isFinite(n) && n > 0 ? n : 20; page = 1; loadList(); });
    const prev = document.getElementById('pg-prev'); const next = document.getElementById('pg-next');
    prev.addEventListener('click', () => { if (page > 1) { page--; loadList(); } });
    next.addEventListener('click', () => { const tp = Math.max(1, Math.ceil(total / limit)); if (page < tp) { page++; loadList(); } });
  }

  function renderDeptPie() {
    try {
      const host = document.getElementById('dept-pie');
      if (!host) return;
      if (!items.length) { host.textContent = 'No data'; return; }
      const data = {};
      items.forEach(r => { const name = toTitle(r.dept_name || r.Department_ID || 'Unknown'); data[name] = (data[name] || 0) + (parseInt(r.Total_Employees || 0, 10)); });
      const labels = Object.keys(data);
      const counts = Object.values(data);
      host.innerHTML = `<canvas id="deptPieCanvas" style="max-width: 520px; height: 420px; width: 100%; display:block; margin: 0 auto;"></canvas>`;
      const ctx = document.getElementById('deptPieCanvas').getContext('2d');
      const pal = ['#2563eb','#059669','#d97706','#e11d48','#7c3aed','#0d9488','#f59e0b','#10b981','#3b82f6','#ef4444'];
      new Chart(ctx, {
        type: 'pie',
        data: {
          labels,
          datasets: [{ data: counts, backgroundColor: labels.map((_,i)=>pal[i%pal.length]) }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: { legend: { position: 'bottom', labels: { boxWidth: 10, font: { size: 14 } } } },
          layout: { padding: 0 }
        }
      });
    } catch {}
  }

  // Client-side PDF export without print dialog
  async function ensureHtml2Pdf(){
    if (window.html2pdf) return;
    await new Promise((resolve)=>{
      const s=document.createElement('script');
      s.src='https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js';
      s.onload=resolve; s.onerror=resolve; document.head.appendChild(s);
    });
  }
  function buildPayrollPdfHtml(items, peso, covered, generatedOn){
    const rows = [];
    let totalDed = 0, totalNet = 0;
    (items || []).forEach((r) => {
      const name = `${(r.first_name||'')} ${(r.last_name||'')}`.trim().replace(/\s+/g,' ').replace(/\b\w/g, c=>c.toUpperCase());
      const basic = Number(r.Basic_Salary ?? r.basic_salary ?? 0);
      const ded = Number(r.Total_Deductions ?? r.total_deductions ?? 0);
      const net = Number(r.Net_Pay ?? r.net_pay ?? 0);
      totalDed += ded; totalNet += net;
      rows.push({ name, basic, ded, net });
    });
    return `
      <style>table, th, td { border-color: #000 !important }</style>
      <div style="font-family: Arial, sans-serif; color:#111827;">
        <div style="display:flex;align-items:center;justify-content:space-between;border-bottom:1px solid #e5e7eb;padding-bottom:8px;margin-bottom:8px;">
          <div style="display:flex;align-items:center;gap:10px;">
            <img src="../../images/unitop.png" onerror="this.style.display='none'" style="height:40px;" />
            <div><div style="font-size:18px;font-weight:700;">Unitop</div></div>
          </div>
          <div style="text-align:right;color:#374151;font-size:12px;">
            <div>Period Covered: <strong>${covered}</strong></div>
            <div>Generated on: <strong>${generatedOn}</strong></div>
          </div>
        </div>
        <div style="text-align:center;font-size:18px;font-weight:700;margin:6px 0 8px;">Payroll Report</div>
        <style>table, th, td{ border:1px solid #000 !important }</style>
        <table style="width:100%;border-collapse:collapse;">
          <thead>
            <tr>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:left;background:#f9fafb;">Employee</th>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:right;background:#f9fafb;">Basic Salary</th>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:right;background:#f9fafb;">Deductions</th>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:right;background:#f9fafb;">Net Pay</th>
            </tr>
          </thead>
          <tbody>
            ${rows.map(r=>`<tr>
              <td style="border:1px solid #e5e7eb;padding:8px;">${r.name}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${peso(r.basic)}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${peso(r.ded)}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${peso(r.net)}</td>
            </tr>`).join('')}
          </tbody>
          <tfoot>
            <tr>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">Totals</td>
              <td style="border:1px solid #e5e7eb;padding:8px;"></td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${peso(totalDed)}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${peso(totalNet)}</td>
            </tr>
          </tfoot>
        </table>
      </div>`;
  }
  function buildAttendancePdfHtml(items, covered, generatedOn){
    const rows = [];
    (items || []).forEach((r) => {
      const name = `${(r.first_name||'')} ${(r.last_name||'')}`.trim().replace(/\s+/g,' ').replace(/\b\w/g, c=>c.toUpperCase());
      const dp = Number(r.Days_Present ?? r.days_present ?? 0);
      const da = Number(r.Days_Absent ?? r.days_absent ?? 0);
      const dlv = Number(r.Days_Leave ?? r.days_leave ?? 0);
      const dlte = Number(r.Days_Late ?? r.days_late ?? 0);
      const hrs = Number(r.Total_Hours_Worked ?? r.total_hours_worked ?? 0);
      rows.push({ name, dp, da, dlv, dlte, hrs });
    });
    return `
      <style>table, th, td { border-color: #000 !important }</style>
      <div style="font-family: Arial, sans-serif; color:#111827;">
        <div style="display:flex;align-items:center;justify-content:space-between;border-bottom:1px solid #e5e7eb;padding-bottom:8px;margin-bottom:8px;">
          <div style="display:flex;align-items:center;gap:10px;">
            <img src="../../images/unitop.png" onerror="this.style.display='none'" style="height:40px;" />
            <div><div style="font-size:18px;font-weight:700;">Unitop</div></div>
          </div>
          <div style="text-align:right;color:#374151;font-size:12px;">
            <div>Period Covered: <strong>${covered}</strong></div>
            <div>Generated on: <strong>${generatedOn}</strong></div>
          </div>
        </div>
        <div style="text-align:center;font-size:18px;font-weight:700;margin:6px 0 8px;">Attendance Report</div>
        <style>table, th, td{ border:1px solid #000 !important }</style>
        <table style="width:100%;border-collapse:collapse;">
          <thead>
            <tr>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:left;background:#f9fafb;">Employee</th>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:right;background:#f9fafb;">Days Present</th>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:right;background:#f9fafb;">Days Absent</th>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:right;background:#f9fafb;">Days Leave</th>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:right;background:#f9fafb;">Days Late</th>
              <th style="border:1px solid #e5e7eb;padding:8px;text-align:right;background:#f9fafb;">Total Hours</th>
            </tr>
          </thead>
          <tbody>
            ${rows.map(r=>`<tr>
              <td style="border:1px solid #e5e7eb;padding:8px;">${r.name}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${r.dp}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${r.da}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${r.dlv}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${r.dlte}</td>
              <td style="border:1px solid #e5e7eb;padding:8px;text-align:right;">${r.hrs.toFixed(2)}</td>
            </tr>`).join('')}
          </tbody>
        </table>
      </div>`;
  }
  function buildEmployeePdfHtml(items, peso, generatedOn){
    const rows = [];
    const fmtDateLongLocal = (val) => {
      try { const d = new Date(val); if (isNaN(d.getTime())) return ''; return d.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }); } catch { return ''; }
    };
    (items || []).forEach((r) => {
      const rawEmpId = Number(r.Employee_ID ?? r.employee_id ?? 0);
      let year;
      try {
        const dsrc = r.Date_Hired || r.date_hired || r.Generated_At || r.generated_at;
        const d = dsrc ? new Date(dsrc) : new Date();
        year = isNaN(d.getTime()) ? (new Date()).getFullYear() : d.getFullYear();
      } catch { year = (new Date()).getFullYear(); }
      const empCode = `EMP${year}-${String(rawEmpId || '').padStart(3,'0')}`;
      const name = toTitle(`${r.first_name || ''} ${r.last_name || ''}`.trim());
      const dept = toTitle(r.dept_name || r.department || '');
      const pos = r.Position ?? r.position ?? '';
      const basic = Number(r.Basic_Salary ?? r.basic_salary ?? 0);
      const status = toTitle(r.Status || r.status || '');
      const dh = fmtDateLongLocal(r.Date_Hired || r.date_hired || '');
      rows.push({ empCode, name, dept, pos, basic, status, dh });
    });
    return `
      <style>table, th, td { border-color: #000 !important }</style>
      <div style="font-family: Arial, sans-serif; color:#111827;">
        <div style="display:flex;align-items:center;justify-content:space-between;border-bottom:1px solid #e5e7eb;padding-bottom:8px;margin-bottom:8px;">
          <div style="display:flex;align-items:center;gap:10px;">
            <img src="../../images/unitop.png" onerror="this.style.display='none'" style="height:40px;" />
            <div><div style="font-size:18px;font-weight:700;">Unitop</div></div>
          </div>
          <div style="text-align:right;color:#374151;font-size:12px;">
            <div>Generated on: <strong>${generatedOn}</strong></div>
          </div>
        </div>
        <div style="text-align:center;font-size:18px;font-weight:700;margin:6px 0 8px;">Employee Report</div>
        <style>table, th, td{ border:1px solid #000 !important }</style>
        <style>th,td{font-size:10px !important} body{font-size:10px !important}</style>
        <table style="width:100%;border-collapse:collapse;table-layout:fixed;">
          <colgroup>
            <col style="width:16%">
            <col style="width:20%">
            <col style="width:16%">
            <col style="width:16%">
            <col style="width:12%">
            <col style="width:10%">
            <col style="width:10%">
          </colgroup>
          <thead>
            <tr>
              <th style="border:1px solid #e5e7eb;padding:8px;background:#f9fafb;text-align:left;">Employee ID</th>
              <th style="border:1px solid #e5e7eb;padding:8px;background:#f9fafb;text-align:left;">Name</th>
              <th style="border:1px solid #e5e7eb;padding:8px;background:#f9fafb;text-align:left;">Department</th>
              <th style="border:1px solid #e5e7eb;padding:8px;background:#f9fafb;text-align:left;">Position</th>
              <th style="border:1px solid #e5e7eb;padding:8px;background:#f9fafb;text-align:right;">Basic Salary</th>
              <th style="border:1px solid #e5e7eb;padding:8px;background:#f9fafb;text-align:left;">Status</th>
              <th style="border:1px solid #e5e7eb;padding:8px;background:#f9fafb;text-align:left;">Date Hired</th>
            </tr>
          </thead>
          <tbody>
            ${rows.map(r=>`<tr>
              <td style=\"border:1px solid #e5e7eb;padding:8px;\">${r.empCode}</td>
              <td style=\"border:1px solid #e5e7eb;padding:8px;\">${r.name}</td>
              <td style=\"border:1px solid #e5e7eb;padding:8px;\">${r.dept}</td>
              <td style=\"border:1px solid #e5e7eb;padding:8px;\">${r.pos}</td>
              <td style=\"border:1px solid #e5e7eb;padding:8px;text-align:right;\">${peso(r.basic)}</td>
              <td style=\"border:1px solid #e5e7eb;padding:8px;\">${r.status}</td>
              <td style=\"border:1px solid #e5e7eb;padding:8px;\">${r.dh}</td>
            </tr>`).join('')}
          </tbody>
        </table>
      </div>`;
  }
  function buildDepartmentPdfHtml(items, peso, generatedOn){
    const rows = [];
    (items || []).forEach((r) => {
      const name = toTitle(r.dept_name || r.department || '');
      const totalEmp = Number(r.Total_Employees ?? r.total_employees ?? 0);
      const totalSalary = Number(r.Total_Salary ?? r.total_salary ?? 0);
      const avg = totalEmp > 0 ? (totalSalary / totalEmp) : 0;
      rows.push({ name, totalEmp, totalSalary, avg });
    });
    return `
      <style>
        *{box-sizing:border-box}
        body{font-family: Arial, sans-serif; color:#111827; font-size:12px;}
        table{width:100%; border-collapse:collapse; table-layout:fixed;}
        th,td{border:1px solid #e5e7eb; padding:8px; font-size:12px; line-height:1.35; vertical-align:top; white-space:normal; word-break:break-word;}
        thead th{background:#f9fafb;}
        td.right, th.right{ text-align:right; }
        .header{ display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e5e7eb; padding-bottom:8px; margin-bottom:8px; }
        .brand{ display:flex; align-items:center; gap:10px; }
        .brand img{ height:40px; }
        .report-title{ text-align:center; font-size:18px; font-weight:700; margin:6px 0 8px; }
      </style>
      <div>
        <div class="header">
          <div class="brand">
            <img src="../../images/unitop.png" onerror="this.style.display='none'" />
            <div><div style="font-size:18px;font-weight:700;">Unitop</div></div>
          </div>
          <div style="text-align:right;color:#374151;font-size:12px;">
            <div>Generated on: <strong>${generatedOn}</strong></div>
          </div>
        </div>
        <div class="report-title">Department Report</div>
        <style>table, th, td{ border:1px solid #000 !important }</style>
        <table>
          <colgroup>
            <col style="width:40%"><col style="width:20%"><col style="width:20%"><col style="width:20%">
          </colgroup>
          <thead>
            <tr>
              <th>Department</th>
              <th class="right">Total Employees</th>
              <th class="right">Total Salary Expense</th>
              <th class="right">Avg Salary</th>
            </tr>
          </thead>
          <tbody>
            ${rows.map(r=>`<tr>
              <td>${r.name}</td>
              <td class="right">${r.totalEmp}</td>
              <td class="right">${peso(r.totalSalary)}</td>
              <td class="right">${peso(r.avg)}</td>
            </tr>`).join('')}
          </tbody>
        </table>
      </div>`;
  }
  function buildDeductionPdfHtml(items, peso, generatedOn){
    // Aggregate per employee + period (single row per name)
    const fmtDateLongLocal = (val) => {
      try { const d = new Date(val); if (isNaN(d.getTime())) return ''; return d.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }); } catch { return ''; }
    };
    const groups = new Map();
    (items || []).forEach((r) => {
      const empId = String(r.Employee_ID ?? r.employee_id ?? '').trim();
      const name = toTitle(`${r.first_name || ''} ${r.last_name || ''}`.trim()) || toTitle(r.Employee_Name || '');
      const psRaw = r.Period_Start || r.period_start || '';
      const peRaw = r.Period_End || r.period_end || '';
      const ps = fmtDateLongLocal(psRaw);
      const pe = fmtDateLongLocal(peRaw);
      const key = `${empId || name}||${psRaw}||${peRaw}`;
      const g = groups.get(key) || { name, ps, pe, psRaw: psRaw, peRaw: peRaw, philhealth: 0, sss: 0, pagibig: 0, withholding: 0 };
      const hasAgg = (r && (r.philhealth != null || r.sss != null || r.pagibig != null || r.withholding != null));
      if (hasAgg) {
        g.philhealth += toNumber(r.philhealth || 0);
        g.sss += toNumber(r.sss || 0);
        g.pagibig += toNumber(r.pagibig || 0);
        g.withholding += toNumber(r.withholding || 0);
      } else {
        // Map type name to bucket
        const dtypeRaw = String(r.deduction_name ?? r.Deduction_Type ?? r.deduction_type ?? '').toLowerCase();
        const amt = toNumber(r.Deduction_Amount ?? r.deduction_amount ?? 0);
        if (/phil/i.test(dtypeRaw)) g.philhealth += amt;
        else if (/sss/i.test(dtypeRaw)) g.sss += amt;
        else if (/pag-?ibig/i.test(dtypeRaw)) g.pagibig += amt;
        else if (/(withhold|withholding|w[-\/.\s]*tax|wtax|wht|income\s*tax|\btax\b)/i.test(dtypeRaw)) g.withholding += amt;
        // Alternate fields if present
        g.philhealth += toNumber(r.philhealth_deduction ?? r.PhilHealth_Deduction ?? 0);
        g.sss += toNumber(r.sss_deduction ?? r.SSS_Deduction ?? 0);
        g.pagibig += toNumber(r.pagibig_deduction ?? r.Pag_Ibig_Deduction ?? r.PagIbig_Deduction ?? 0);
        g.withholding += toNumber(r.tax_deduction ?? r.Tax_Deduction ?? r.withholding_deduction ?? r.Withholding_Deduction ?? r.Withholding_Deductions ?? 0);
      }
      groups.set(key, g);
    });
    const rows = Array.from(groups.values()).map(g => ({
      name: g.name,
      ps: g.ps,
      pe: g.pe,
      psRaw: g.psRaw,
      peRaw: g.peRaw,
      philhealth: toNumber(g.philhealth),
      sss: toNumber(g.sss),
      pagibig: toNumber(g.pagibig),
      withholding: toNumber(g.withholding),
      total: toNumber(g.philhealth) + toNumber(g.sss) + toNumber(g.pagibig) + toNumber(g.withholding)
    }));
    // Totals row
    const totals = rows.reduce((a, r) => ({
      philhealth: a.philhealth + r.philhealth,
      sss: a.sss + r.sss,
      pagibig: a.pagibig + r.pagibig,
      withholding: a.withholding + r.withholding,
      total: a.total + r.total
    }), { philhealth: 0, sss: 0, pagibig: 0, withholding: 0, total: 0 });

    const fmtPeriodCell = (psRaw, peRaw) => {
      try {
        const ds = psRaw ? new Date(psRaw) : null;
        const de = peRaw ? new Date(peRaw) : null;
        const validS = ds && !isNaN(ds.getTime());
        const validE = de && !isNaN(de.getTime());
        const fmtShort = (d) => d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        const fmtLong = (d) => d.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        if (validS && validE) return `${fmtShort(ds)} â†’ ${fmtLong(de)}`;
        if (validE) return fmtLong(de);
        if (validS) return fmtShort(ds);
        if (psRaw && peRaw) return `${psRaw} â†’ ${peRaw}`;
        return psRaw || peRaw || '';
      } catch { return ''; }
    };

    return `
      <style>
        *{box-sizing:border-box}
        body{font-family: Arial, sans-serif; color:#111827; font-size:12px;}
        table{width:100%; border-collapse:collapse; table-layout:fixed;}
        th,td{border:1px solid #e5e7eb; padding:8px; font-size:12px; line-height:1.35; vertical-align:top; white-space:normal; word-break:break-word;}
        thead th{background:#f9fafb;}
        td.right, th.right{ text-align:right; }
        .header{ display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e5e7eb; padding-bottom:8px; margin-bottom:8px; }
        .brand{ display:flex; align-items:center; gap:10px; }
        .brand img{ height:40px; }
        .report-title{ text-align:center; font-size:18px; font-weight:700; margin:6px 0 8px; }
      </style>
      <div>
        <div class="header">
          <div class="brand">
            <img src="../../images/unitop.png" onerror="this.style.display='none'" />
            <div><div style="font-size:18px;font-weight:700;">Unitop</div></div>
          </div>
          <div style="text-align:right;color:#374151;font-size:12px;">
            <div>Generated on: <strong>${generatedOn}</strong></div>
          </div>
        </div>
        <div class="report-title">Deduction Report</div>
        <style>table, th, td{ border:1px solid #000 !important }</style>
        <table>
          <colgroup>
            <col style="width:24%"><col style="width:12%"><col style="width:12%"><col style="width:12%"><col style="width:14%"><col style="width:12%"><col style="width:14%">
          </colgroup>
          <thead>
            <tr>
              <th>Employee</th>
              <th class="right">PhilHealth</th>
              <th class="right">SSS</th>
              <th class="right">Pag-IBIG</th>
              <th class="right">Withholding Tax</th>
              <th class="right">Total</th>
              <th>Start Period End</th>
            </tr>
          </thead>
          <tbody>
            ${rows.map(r=>`<tr>
              <td>${r.name}</td>
              <td class="right">${peso(r.philhealth)}</td>
              <td class="right">${peso(r.sss)}</td>
              <td class="right">${peso(r.pagibig)}</td>
              <td class="right">${peso(r.withholding)}</td>
              <td class="right">${peso(r.total)}</td>
              <td>${fmtPeriodCell(r.psRaw, r.peRaw)}</td>
            </tr>`).join('')}
          </tbody>
          <tfoot>
            <tr>
              <th class="right">Totals</th>
              <th class="right">${peso(totals.philhealth)}</th>
              <th class="right">${peso(totals.sss)}</th>
              <th class="right">${peso(totals.pagibig)}</th>
              <th class="right">${peso(totals.withholding)}</th>
              <th class="right">${peso(totals.total)}</th>
              <th></th>
            </tr>
          </tfoot>
        </table>
      </div>`;
  }
  async function exportReportsPdf(tab){
    await ensureHtml2Pdf();
    const sdEl = document.querySelector('[data-key="start_date"]');
    const edEl = document.querySelector('[data-key="end_date"]');
    const fmtMonthYear = (d) => d.toLocaleDateString('en-US', { year: 'numeric', month: 'long' });
    const fmtDateLong = (d) => d.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
    const fmtRange = (sd, ed) => {
      try {
        if (sd && !isNaN(sd) && ed && !isNaN(ed)) return `${fmtDateLong(sd)} â€” ${fmtDateLong(ed)}`;
        if (ed && !isNaN(ed)) return fmtMonthYear(ed);
        if (sd && !isNaN(sd)) return fmtMonthYear(sd);
        return '';
      } catch { return ''; }
    };
    let covered = '';
    try {
      const sd = sdEl && sdEl.value ? new Date(sdEl.value) : null;
      const ed = edEl && edEl.value ? new Date(edEl.value) : null;
      covered = fmtRange(sd, ed);
    } catch {}
    if (!covered && Array.isArray(items) && items.length) {
      try {
        const r0 = items[0];
        const ed = r0.Period_End ? new Date(r0.Period_End) : (r0.period_end ? new Date(r0.period_end) : null);
        const sd = r0.Period_Start ? new Date(r0.Period_Start) : (r0.period_start ? new Date(r0.period_start) : null);
        covered = fmtRange(sd, ed) || fmtMonthYear(new Date());
      } catch { covered = fmtMonthYear(new Date()); }
    }
    const now = new Date();
    const generatedOn = `${fmtDateLong(now)} ${(() => { let h=now.getHours(), m=now.getMinutes(), ampm=h>=12?'PM':'AM'; h=h%12; if(h===0) h=12; const pad=n=>String(n).padStart(2,'0'); return `${pad(h)}:${pad(m)}${ampm}`; })()}`;
    if (tab === 'payroll') {
      const html = buildPayrollPdfHtml(items, peso, covered || fmtMonthYear(new Date()), generatedOn);
      const container = document.createElement('div');
      container.innerHTML = html;
      const opt = { margin: 10, filename: `payroll_report_${now.toISOString().slice(0,10)}.pdf`, image: { type: 'jpeg', quality: 0.98 }, html2canvas: { scale: 2 }, jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' } };
      await window.html2pdf().from(container).set(opt).save();
      return;
    }
    if (tab === 'attendance') {
      const html = buildAttendancePdfHtml(items, covered || fmtMonthYear(new Date()), generatedOn);
      const container = document.createElement('div');
      container.innerHTML = html;
      const opt = { margin: 10, filename: `attendance_report_${now.toISOString().slice(0,10)}.pdf`, image: { type: 'jpeg', quality: 0.98 }, html2canvas: { scale: 2 }, jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' } };
      await window.html2pdf().from(container).set(opt).save();
      return;
    }
    if (tab === 'employee') {
      const html = buildEmployeePdfHtml(items, peso, generatedOn);
      const container = document.createElement('div');
      container.innerHTML = html;
      const opt = { margin: 10, filename: `employee_report_${now.toISOString().slice(0,10)}.pdf`, image: { type: 'jpeg', quality: 0.98 }, html2canvas: { scale: 2 }, jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' } };
      await window.html2pdf().from(container).set(opt).save();
      return;
    }
    if (tab === 'deduction') {
      const html = buildDeductionPdfHtml(items, peso, generatedOn);
      const container = document.createElement('div');
      container.innerHTML = html;
      const opt = { margin: 10, filename: `deduction_report_${now.toISOString().slice(0,10)}.pdf`, image: { type: 'jpeg', quality: 0.98 }, html2canvas: { scale: 2 }, jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' } };
      await window.html2pdf().from(container).set(opt).save();
      return;
    }
    if (tab === 'department') {
      const html = buildDepartmentPdfHtml(items, peso, generatedOn);
      const container = document.createElement('div');
      container.innerHTML = html;
      const opt = { margin: 10, filename: `department_report_${now.toISOString().slice(0,10)}.pdf`, image: { type: 'jpeg', quality: 0.98 }, html2canvas: { scale: 2 }, jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' } };
      await window.html2pdf().from(container).set(opt).save();
      return;
    }
    // Fallback for other tabs
    printTable();
  }

  // Generates PDF via browser print dialog (users can choose "Save as PDF")
  function printTable() {
    const w = window.open('', 'PRINT', 'height=850,width=1000,top=50,left=100');
    const pad2 = (n) => String(n).padStart(2, '0');
    const fmtTime12 = (d) => { let h = d.getHours(); const m = d.getMinutes(); const ampm = h >= 12 ? 'PM' : 'AM'; h = h % 12; if (h === 0) h = 12; return `${pad2(h)}:${pad2(m)}${ampm}`; };
    const fmtDateLong = (d) => d.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
    const fmtMonthYear = (d) => d.toLocaleDateString('en-US', { year: 'numeric', month: 'long' });

    if (activeTab === 'payroll') {
      // Determine covered period (prefer filter values, else from items)
      const sdEl = document.querySelector('[data-key="start_date"]');
      const edEl = document.querySelector('[data-key="end_date"]');
      let covered = '';
      let baseDate = null;
      try {
        const sd = sdEl && sdEl.value ? new Date(sdEl.value) : null;
        const ed = edEl && edEl.value ? new Date(edEl.value) : null;
        if (ed && !isNaN(ed)) { covered = fmtMonthYear(ed); baseDate = ed; }
        else if (sd && !isNaN(sd)) { covered = fmtMonthYear(sd); baseDate = sd; }
      } catch {}
      if (!covered && Array.isArray(items) && items.length) {
        try {
          const r0 = items[0];
          const ed = r0.Period_End ? new Date(r0.Period_End) : null;
          const sd = r0.Period_Start ? new Date(r0.Period_Start) : null;
          const d = (ed && !isNaN(ed)) ? ed : (sd && !isNaN(sd) ? sd : new Date());
          covered = fmtMonthYear(d); baseDate = d;
        } catch { covered = fmtMonthYear(new Date()); }
      }
      const now = new Date();
      const generatedOn = `${fmtDateLong(now)} ${fmtTime12(now)}`;

      // Build rows and totals from items
      const rows = [];
      let totalDed = 0, totalNet = 0;
      (items || []).forEach((r) => {
        const emp = toTitle(`${r.first_name || ''} ${r.last_name || ''}`.trim());
        const basic = Number(r.Basic_Salary ?? r.basic_salary ?? 0);
        const ded = Number(r.Total_Deductions ?? r.total_deductions ?? 0);
        const net = Number(r.Net_Pay ?? r.net_pay ?? 0);
        totalDed += ded; totalNet += net;
        rows.push({ emp, basic, ded, net });
      });

      const html = `
      <html>
      <head>
        <style>
          body{ font-family: Arial, sans-serif; color:#111827; }
          .header{ display:flex; align-items:center; justify-content:space-between; border-bottom:1px solid #e5e7eb; padding-bottom:8px; margin-bottom:12px; }
          .brand{ display:flex; align-items:center; gap:10px; }
          .brand img{ height:40px; }
          .title{ text-align:right; }
          .subtitle{ color:#374151; font-size:12px; }
          .report-title{ text-align:center; font-size:18px; font-weight:700; margin:6px 0 8px; }
          table{ width:100%; border-collapse:collapse; margin-top:8px; }
          th, td{ border:1px solid #000; padding:8px; text-align:left; font-size:12px; }
          thead{ background:#f9fafb; }
          tfoot td{ font-weight:600; }
          .right{ text-align:right; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="brand">
.            <img src="../../images/unitop.png" onerror="this.style.display='none'" />
            <div>
              <div style="font-size:18px; font-weight:700;">Unitop</div>
                          </div>
          </div>
          <div class="title">
            <div class="subtitle">Period Covered: <strong>${covered}</strong></div>
            <div class="subtitle">Generated on: <strong>${generatedOn}</strong></div>
          </div>
        </div>
        <div class="report-title">Payroll Report</div>

        <table>
          <thead>
            <tr>
              <th>Employee</th>
              <th class="right">Basic Salary</th>
              <th class="right">Deductions</th>
              <th class="right">Net Pay</th>
            </tr>
          </thead>
          <tbody>
            ${rows.map(r => `
              <tr>
                <td>${r.emp}</td>
                <td class="right">${peso(r.basic)}</td>
                <td class="right">${peso(r.ded)}</td>
                <td class="right">${peso(r.net)}</td>
              </tr>`).join('')}
          </tbody>
          <tfoot>
            <tr>
              <td class="right">Totals</td>
              <td></td>
              <td class="right">${peso(totalDed)}</td>
              <td class="right">${peso(totalNet)}</td>
            </tr>
          </tfoot>
        </table>
      </body>
      </html>`;

      w.document.write(html);
      try { w.document.title = ' '; w.history.replaceState({}, '', ' '); } catch(e) {}
      w.document.close(); w.focus(); w.print(); w.close();
    } else {
      // Fallback to default table print for non-payroll tabs
      const tw = document.getElementById('table-wrap');
      w.document.write(`<html><head><title>Reports - ${toTitle(activeTab)}</title><style>table{width:100%;border-collapse:collapse}th,td{border:1px solid #000;padding:6px;text-align:left}thead{background:#f9fafb}</style></head><body>`);
      w.document.write(`<h3>Reports â€” ${toTitle(activeTab)}</h3>`);
      w.document.write(tw.innerHTML);
      w.document.write('</body></html>');
      try { w.document.title = ' '; w.history.replaceState({}, '', ' '); } catch(e) {}
      w.document.close(); w.focus(); w.print(); w.close();
    }
  }

  // Wire top controls
  document.querySelectorAll('#rep-tabs [data-tab]').forEach(btn => {
    btn.addEventListener('click', () => setActiveTab(btn.getAttribute('data-tab')));
  });
    document.getElementById('btn-generate').addEventListener('click', async (e) => {
    e.preventDefault();
    try {
      await loadList();
    } catch {
      await safeToast('Failed to load reports', 'error');
    }
  });
  // Excel export handler (client-side XLSX)
  document.getElementById('btn-export-excel').addEventListener('click', async (e) => { e.preventDefault(); await exportReportsExcel(activeTab, getFiltersFromUI()); });
  // PDF export handler (opens print dialog; choose Save as PDF)
  document.getElementById('btn-export-pdf').addEventListener('click', async (e) => { e.preventDefault(); await exportReportsPdf(activeTab); });
  document.getElementById('btn-print').addEventListener('click', (e) => { e.preventDefault(); printTable(); });

  // Initial tab
  setActiveTab('payroll');
}
